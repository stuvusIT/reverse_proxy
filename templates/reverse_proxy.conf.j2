# vim: sw=4 ts=4 ft=nginx
# {{ ansible_managed }}

{% from "macros.j2" import build_domain_list_for_domains, build_domain_list with context %}

{%- for target in proxy_domains -%}
{% for domains in target.served_domains %}
# {{ target.target_host }}
#  authentication: {% if target.auth|default(False) -%} enabled {%- else -%} disabled {%- endif %}{{ '' }}
#  description: {{ target.target_description }}
server {
	ssl on;
	charset utf-8;
	listen 443 {% if domains.enable_http2_proxy is defined and domains.enable_http2_proxy %} http2 {% endif %} ssl;

	server_name {{- build_domain_list_for_domains( domains, ' ' ) -}};

	ssl_certificate     /etc/letsencrypt/live/{{- build_domain_list_for_domains( domains, ' ' ).split(' ')[1] -}}/fullchain.pem;
	ssl_certificate_key /etc/letsencrypt/live/{{- build_domain_list_for_domains( domains, ' ' ).split(' ')[1] -}}/privkey.pem;
	ssl_session_timeout {{ reverse_proxy_ssl_session_timeout }};
	ssl_session_cache {{ reverse_proxy_ssl_session_cache }};
	ssl_session_tickets {% if reverse_proxy_ssl_session_tickets %}on{% else %}off{% endif %};

	ssl_protocols {{ reverse_proxy_ssl_protocols|join(' ') }};
	ssl_ciphers {{ reverse_proxy_ssl_ciphers|join(':') }};
	ssl_prefer_server_ciphers {% if reverse_proxy_ssl_prefer_server_ciphers %}on{% else %}off{% endif %};

	add_header Strict-Transport-Security "max-age={{ hsts_max_age }}; includeSubDomains; preload" always;

{% if reverse_proxy_ssl_stapling %}
	ssl_stapling on;
	ssl_stapling_verify on;
	{% if reverse_proxy_ssl_trusted_certificate is defined -%}
	ssl_trusted_certificate {{ reverse_proxy_ssl_trusted_certificate }};
	{%- endif %}

{% endif %}
{% if reverse_proxy_use_dhparam %}
	ssl_dhparam {{ reverse_proxy_dhparam_path }};

{% endif %}
{% if domains.client_max_body_size is defined %}
	client_max_body_size {{ domains.client_max_body_size }};

{% endif %}
{% if reverse_proxy_redirect_to_first_domain -%}
	{%- set primary_name = build_domain_list_for_domains(domains, ',').split(',')[1] %}
	if ($host != "{{ primary_name }}") {
		return {{ reverse_proxy_redirect_to_first_domain_code }} https://{{ primary_name }}$request_uri;
	}
{% endif %}

{% if domains.use_keepalive is defined and domains.use_keepalive %}
	{%- set primary_name = build_domain_list_for_domains(domains, ',').split(',')[1] %}
	upstream {{ primary_name }} {
		keepalive {{ domains.proxy_keepalive | default(1024) }};
		server        {{ '' }}
		{%- if domains.crypto|default(default_crypto) -%}
			https://
		{%- else -%}
			http://
		{%- endif -%}{{- target.target_ip -}}
		{%- if domains.port is defined -%}:{{- domains.port -}}{%- endif -%};
	}
{% endif %}
{% if domains.redirect is defined %}
	return {{ domains.redirect_code|default(reverse_proxy_redirect_code) }} {{ domains.redirect }}$request_uri?;
{% else %}
	location / {
		{% if domains.use_keepalive is defined and domains.use_keepalive %}
		proxy_pass http://{{ primary_name }};
		proxy_http_version 1.1;
		proxy_set_header Connection "";
		{% else %}
		proxy_pass        {{ '' }}
		{%- if domains.crypto|default(default_crypto) -%}
		https://
		{%- else -%}
		http://
		{%- endif -%}{{- target.target_ip -}}
		{%- if domains.port is defined -%}:{{- domains.port -}}{%- endif -%};
		{% endif %};
		proxy_redirect    off;
		proxy_set_header  Host               $host;
		proxy_set_header  X-Real-IP          $remote_addr;
		proxy_set_header  X-Forwarded-For    $proxy_add_x_forwarded_for;
		proxy_set_header  X-Forwarded-Proto  $scheme;
		proxy_set_header  X-Forwarded-Port   $server_port;
{% if domains.extra_location_config is defined %}
		{{ domains.extra_location_config }}
{% endif %}
{% if domains.auth|default(False) %}

		auth_pam              "Admins Only";
		auth_pam_service_name "pam_unix";
{% endif %}
{% if domains.access_control is defined %}

	{% for access_control in domains.access_control %}
		{{ access_control | first }}	{{ access_control[access_control | first] }};
	{% endfor %}
{% endif %}
	}
{% endif %}

{% for location_block in domains.extra_locations|default([]) %}
	location {{ location_block|first }} {
		{{ location_block[location_block|first] }}
	}

{% endfor %}
	error_page 502 @defaultHost;
	location @defaultHost {
		if ($http_user_agent !~ "Encrypt validation server" ) {
			add_header Strict-Transport-Security "max-age={{ hsts_max_age }}; includeSubDomains; preload" always; #lets encrypt has to be excluded from hsts
		}
		return 302 {{ default_url|default('http://example.com') }};
	}
}

{% endfor %}
{%- endfor -%}
